/* COLORS */

/*
Before making edits, please read sachagreif.com/sass-color-variables/.
The idea is basically to first decide on some number of colors that will be used
in the books ($h0 through $h1 with shades s2-s4). These correspond to real-world
colors, for example "orange" or "blue". These colors are however NOT used
directly on elements - they are referenced by functional colors, which are used
in elements.

This layered approach solves a lot of possible problems with colors. Suppose you
want to fine-tune the colour scheme, so that everything that's been blue is
still blue, but just a bit different shade. You only need to touch $h2
variables, for example make everything a bit lighter or darker or more or less
saturated.

Suppose you want to do away with orange color completely and have pink instead?
No problem, just change $h0 to suitable pink hue. Notice that this is the reason
for having abstract $hN variables instead of concrete $pink or $orange. There
may be need to change the color scheme completely, in which case we'd end up
having color names like $orange being actually pink, which makes no sense and is
evil and bad.

Numbers in $alt-bg-colors and $accent-colors refer to alternatively decorated
blocks; see for example _pohja.scss. The convention is to have element of class
whatever1 to use colours based on $h1; class whatever2 uses of course colors
based on $h2.
*/

/* Color adjustment variables */
/* Used in _pohja.scss, underlining of headers. */
$lightness-difference:  30%;
$saturation-difference: 15%;

/* HSL values */
/*
I'm using HSL instead of RGB or hex, because it separates the hue, ie., the
primary color attribute, from saturation and lightness, which deal with how
'bright' the color is. This means, at least in theory, that *hues* can be
modified easily and independently from the *shades*. Want to make keep the hues
in the book but increase brightness? Keep hues as they are, change saturations
and lightnesses. Want to change hues but keep saturation and lightness as they
are? Just modify hues.

The current implementation does not yet manage saturations and lightnesses
completely based on baseline values; I'm not quite sure if it ever will, simply
because human perception is a tricky beast to tame.

Hues already work as intended. Want to turn everything that was orange into
purple? Just change the corresponding baseline hue, $h0, to whatever purple hue
strikes your fancy, for example 270deg. A handy calculator for HSL values:
http://www.december.com/html/spec/colorhsltable.html

Of course, nothing prevents you from adding colors using RGB or hex either.
*/

/* Baseline hues */
$h0:  37deg;  // Orange
$h1:  124deg; // Turquoise
$h2:  212deg; // Blue
$h3:  25deg;  // Red

/* Baseline saturation and lightness */
$s0:  70%;
$l0:  78%;



/* Descriptive colors */

/* Note the usage of baseline hues and modified saturations and lightnesses! */

/*
This section defines shades (with different saturations and brightnesses) based
on baseline hues above. You can play around with the values if you want to;
try to keep some consistency in production use!

The color variables are NOT named after the actual color described, but by an
abstract index number. The reason: Suppose that we did change everything orange
to purple, as in the example above. Now, if the color variable was called
$orange but actually was purple, it'd be very hard to understand what's going
on. Especially for someone else looking at the code, say, two years later.

The grays can (should?) also be tinted, but this must be done carefully wrt.
legibility. The grays are also called gray simply because I believe shades of
gray are going to be used no matter what the styling accent colors will be. If
I'm wrong, feel free to change them to whatever.

If none of this makes any sense, feel free to override all this and define the
colors in whatever way you feel is natural.
*/

// ORANGE
$h0-s2: hsl($h0, $s0, $l0);
$h0-s3: hsl($h0, 100%, 73%);
$h0-s4: hsl($h0, 100%, 62%);

// TURQUOISE
$h1-s2: hsl($h1, $s0, $l0);
$h1-s3: hsl($h1, 54%, 59%);
$h1-s4: hsl($h1, 63%, 44%);

// BLUE
$h2-s2: hsl($h2, $s0, $l0);
$h2-s3: hsl($h2, 51%, 61%);
$h2-s4: hsl($h2, 54%, 46%);

// RED
$h3-s2: hsl($h3, $s0, $l0);
$h3-s3: hsl($h3, 100%, 73%);
$h3-s4: hsl($h3, 100%, 62%);

// FIVE SHADES OF GRAY
$almost-white:  #FAFAFA;
$light-gray:    #E6E6E6;
$grey:          #CCCCCC;
$dark-grey:     #666666;
$almost-black:  #333333;


/* Functional colors */

/*
Notice that here we don't actually use any sort of colour definitions, such as
#FAFAFA or hsl($h0, 100%, 73%). Rather, we re-use the colors defined above in a
manner that gives a functional name to what it's supposed to do, what is its
significance.

These are the variables that are (mostly) used in elements. All code above just
makes it easier to manage colors. Or at the least, that's what it tries to do.
*/

$page-background-color:     $almost-white;
$background-color:          $light-gray;
$border-color:              $dark-grey;
$text-color:                $almost-black;

$alt-bg-color-1:            $h1-s2;
$alt-bg-color-2:            $h2-s2;
$alt-bg-color-3:            $h3-s2;

$accent-color-1:            $h1-s3;
$accent-color-2:            $h2-s3;
$accent-color-3:            $h3-s3;

$alt-margin-1:              $h0-s4;
$alt-margin-2:              $h0-s4;
$alt-margin-3:              $h0-s4;


$note-bg-color:             $h2-s3;
$light-accent:              $h1-s4;
$link-action:               $h3-s4;
$bg-highlight:              $h3-s4;